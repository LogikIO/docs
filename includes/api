<h1 id="api-overview">API Overview</h1>

<h2 id="summary">Summary</h2>

<p>The Stamplay API exposes the following resources:</p>

<!-- Manage and access object data.
Manage and access user data, create user sessions.
Manage and access user roles, assign roles.
Execute Code Blocks.
Manage customers and payment information, charge a customer, add subscriptions.
Send an email. -->

<table><thead>
<tr>
<th>Resource</th>
<th style="text-align: right">Endpoint</th>
</tr>
</thead><tbody>
<tr>
<td><a href="#objects">Objects</a></td>
<td style="text-align: right">/api/cobject/v1/{id}</td>
</tr>
<tr>
<td><a href="#users">Users</a></td>
<td style="text-align: right">/api/user/v1/users</td>
</tr>
<tr>
<td><a href="#roles">Roles</a></td>
<td style="text-align: right">/api/user/v1/roles</td>
</tr>
<tr>
<td><a href="#code-blocks">Code Blocks</a></td>
<td style="text-align: right">/api/v1/run/:codeblock</td>
</tr>
<tr>
<td><a href="#stripe">Stripe</a></td>
<td style="text-align: right">/api/stripe/v1/</td>
</tr>
<tr>
<td><a href="#email">Email</a></td>
<td style="text-align: right">/api/email/v1/send</td>
</tr>
</tbody></table>

<h2 id="pagination">Pagination</h2>
<pre class="highlight json"><code><span class="w">    </span><span class="p">{</span><span class="w">
        </span><span class="nt">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">
        </span><span class="nt">"pagination"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nt">"page"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
            </span><span class="nt">"per_page"</span><span class="p">:</span><span class="w"> </span><span class="mi">20</span><span class="p">,</span><span class="w">
            </span><span class="nt">"total_pages"</span><span class="p">:</span><span class="w"> </span><span class="mi">4</span><span class="p">,</span><span class="w">
            </span><span class="nt">"total_elements"</span><span class="p">:</span><span class="w"> </span><span class="mi">71</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span></code></pre>

<p>Responses from the <strong>User</strong> and <strong>Object</strong> resource will also return a <code class="prettyprint">pagination</code> object.</p>

<p>Pagination can be managed by using the <code class="prettyprint">page</code> and <code class="prettyprint">per_page</code> query parameters.</p>

<p>Pagination details are included using the Link header introduced by RFC 5988.
The Link header returns a set of ready-made links so the API consumer does not have to construct the links themselves.</p>

<h2 id="filtering">Filtering</h2>
<pre class="highlight shell"><code>    curl -X <span class="s2">"GET"</span> <span class="s2">"https://APP-ID.stamplayapp.com/api/cobject/v1/picture?status=published"</span>
</code></pre>
<pre class="highlight javascript"><code>    <span class="nx">Stamplay</span><span class="p">.</span><span class="nb">Object</span><span class="p">(</span><span class="s2">"picture"</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">get</span><span class="p">({</span> <span class="na">status</span> <span class="p">:</span> <span class="s2">"published"</span> <span class="p">})</span>
        <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// success</span>
        <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// error</span>
        <span class="p">})</span>
</code></pre>
<pre class="highlight nodejs"><code>    <span class="nx">Stamplay</span><span class="p">.</span><span class="nb">Object</span><span class="p">(</span><span class="s1">'picture'</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">get</span><span class="p">({</span> <span class="na">status</span> <span class="p">:</span> <span class="s2">"published"</span> <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
          <span class="c1">// response</span>
        <span class="p">})</span>
</code></pre>

<p>To filter a response based on a value of a field, set the field and value as a parameter in the request. To filter by more than one field, add each filterable field to the request as a paramter.</p>

<h2 id="sorting">Sorting</h2>
<pre class="highlight shell"><code>    curl -X <span class="s2">"GET"</span> <span class="s2">"https://APP-ID.stamplayapp.com/api/cobject/v1/picture?sort=-dt_create"</span>
</code></pre>
<pre class="highlight javascript"><code>    <span class="nx">Stamplay</span><span class="p">.</span><span class="nb">Object</span><span class="p">(</span><span class="s2">"picture"</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">get</span><span class="p">({</span> <span class="na">sort</span> <span class="p">:</span> <span class="s2">"-dt_create"</span> <span class="p">})</span>
        <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// success</span>
        <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// error</span>
        <span class="p">})</span>
</code></pre>
<pre class="highlight nodejs"><code>    <span class="nx">Stamplay</span><span class="p">.</span><span class="nb">Object</span><span class="p">(</span><span class="s1">'picture'</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">get</span><span class="p">({</span> <span class="na">sort</span> <span class="p">:</span> <span class="s2">"-dt_create"</span> <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
          <span class="c1">// response</span>
        <span class="p">})</span>
</code></pre>

<p>To sort the response, set a <code class="prettyprint">sort</code> parameter as a comma delimited list to sort by in order of importance.</p>

<p>If a field name is appened to an <code class="prettyprint">-</code> character then that field will be sorted in descending order based on the type, otherwise by default the field will be sort in ascending order.</p>

<h2 id="selecting">Selecting</h2>
<pre class="highlight shell"><code>    curl -X <span class="s2">"GET"</span> <span class="s2">"https://APP-ID.stamplayapp.com/api/cobject/v1/picture?select=-dt_create,owner,status"</span>
</code></pre>
<pre class="highlight javascript"><code>    <span class="nx">Stamplay</span><span class="p">.</span><span class="nb">Object</span><span class="p">(</span><span class="s2">"picture"</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">get</span><span class="p">({</span> <span class="na">select</span> <span class="p">:</span> <span class="s2">"dt_create,owner,status"</span> <span class="p">})</span>
        <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// success</span>
        <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// error</span>
        <span class="p">})</span>
</code></pre>
<pre class="highlight nodejs"><code>    <span class="nx">Stamplay</span><span class="p">.</span><span class="nb">Object</span><span class="p">(</span><span class="s1">'picture'</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">get</span><span class="p">({</span> <span class="na">sort</span> <span class="p">:</span> <span class="s2">"dt_create,owner,status"</span> <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
          <span class="c1">// response</span>
        <span class="p">})</span>
</code></pre>

<p>Selecting is the response projection for each object returned. This allows for a lighter data transfer between requests, and simplifies response objects.</p>

<p>To select a field to return, set the <code class="prettyprint">select</code> request parameter to the value of the field name to return. If you want to return more than one field, set the <code class="prettyprint">select</code> parameter as a comma delimited set of properties to return.</p>

<p>The <code class="prettyprint">_id</code> field is always returned.</p>

<h2 id="advanced-queries">Advanced Queries</h2>
<pre class="highlight shell"><code>    curl -X <span class="s2">"GET"</span> <span class="s2">"https://APP-ID.stamplayapp.com/api/cobject/v1/picture?where=%7B%20rating'%20:%20%7B%20</span><span class="nv">$gt</span><span class="s2">%20:%205%20%7D%20%7D"</span>

</code></pre>
<pre class="highlight javascript"><code>    <span class="nx">Stamplay</span><span class="p">.</span><span class="nb">Object</span><span class="p">(</span><span class="s2">"picture"</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">get</span><span class="p">({</span> <span class="na">where</span> <span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="na">rating</span> <span class="p">:</span> <span class="p">{</span> <span class="na">$gt</span> <span class="p">:</span> <span class="mi">5</span> <span class="p">}</span> <span class="p">})</span> <span class="p">})</span>
        <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// success</span>
        <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// error</span>
        <span class="p">})</span>
</code></pre>
<pre class="highlight nodejs"><code>    <span class="nx">Stamplay</span><span class="p">.</span><span class="nb">Object</span><span class="p">(</span><span class="s1">'picture'</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">get</span><span class="p">({</span> <span class="na">where</span> <span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="na">rating</span> <span class="p">:</span> <span class="p">{</span> <span class="na">$gt</span> <span class="p">:</span> <span class="mi">5</span> <span class="p">}</span> <span class="p">})</span> <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
          <span class="c1">// response</span>
        <span class="p">})</span>
</code></pre>

<p>For more advanced methods of queries, Stamplay supports an array of MongoDB&rsquo;s conditional operators.</p>

<p>By setting a JSON query string to the <code class="prettyprint">where</code> parameter you can use the operators to perform advanced queries.</p>

<table><thead>
<tr>
<th style="text-align: left">Operator</th>
<th style="text-align: left">Summary</th>
</tr>
</thead><tbody>
<tr>
<td style="text-align: left">$gt</td>
<td style="text-align: left">Matches values that are greater than the value specified in the query.</td>
</tr>
<tr>
<td style="text-align: left">$gte</td>
<td style="text-align: left">Matches values that are greater than or equal to the value specified in the query.</td>
</tr>
<tr>
<td style="text-align: left">$in</td>
<td style="text-align: left">Matches any of the values that exist in an array specified in the query.</td>
</tr>
<tr>
<td style="text-align: left">$lt</td>
<td style="text-align: left">Matches values that are less than the value specified in the query.</td>
</tr>
<tr>
<td style="text-align: left">$lte</td>
<td style="text-align: left">Matches values that are less than or equal to the value specified in the query.</td>
</tr>
<tr>
<td style="text-align: left">$ne</td>
<td style="text-align: left">Matches all values that are not equal to the value specified in the query.</td>
</tr>
<tr>
<td style="text-align: left">$nin</td>
<td style="text-align: left">Matches values that do not exist in an array specified to the query.</td>
</tr>
<tr>
<td style="text-align: left">$or</td>
<td style="text-align: left">Joins query clauses with a logical OR returns all documents that match the conditions of either clause.</td>
</tr>
<tr>
<td style="text-align: left">$and</td>
<td style="text-align: left">Joins query clauses with a logical AND returns all documents that match the conditions of both clauses.</td>
</tr>
<tr>
<td style="text-align: left">$not</td>
<td style="text-align: left">Inverts the effect of a query expression and returns documents that do not match the query expression.</td>
</tr>
<tr>
<td style="text-align: left">$nor</td>
<td style="text-align: left">Joins query clauses with a logical NOR returns all documents that fail to match both clauses.</td>
</tr>
<tr>
<td style="text-align: left">$exists</td>
<td style="text-align: left">Matches documents that have the specified field.</td>
</tr>
<tr>
<td style="text-align: left">$type</td>
<td style="text-align: left">Selects documents if a field is of the specified type.</td>
</tr>
<tr>
<td style="text-align: left">$all</td>
<td style="text-align: left">Matches arrays that contain all elements specified in the query.</td>
</tr>
<tr>
<td style="text-align: left">$elemMatch</td>
<td style="text-align: left">Selects documents if element in the array field matches all the specified $elemMatch condition.</td>
</tr>
<tr>
<td style="text-align: left">$size</td>
<td style="text-align: left">Selects documents if the array field is a specified size</td>
</tr>
<tr>
<td style="text-align: left">$regex</td>
<td style="text-align: left">Selects documents where values match a specified regular expression.</td>
</tr>
</tbody></table>

<h2 id="authentication">Authentication</h2>
<pre class="highlight shell-always"><code>
    <span class="s2">"Authorization"</span> <span class="err">:</span> <span class="s2">"Basic c3RhbXBsYXlrYjo5MTRhMmUzMaMwZWRlMDdmZThhNjYzMzkxMWQyYWQyOTNkNjJkNTQ3OGFiYmViNjEyNzhhYjFjYzE2MDhiZaRi"</span>
</code></pre>
<pre class="highlight shell-always"><code>    <span class="s2">"x-stamplay-jwt"</span> <span class="err">:</span> <span class="s2">"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoidXNlciIsImFwcERvbWFpbiI6InN0YW1wbGF5a2Iuc3RhbXBsYXlscHAuY29tIiwiYXBwSWQiOiJzdGFtcGxheWtiIiwidXNlciI6IjU2ZjAyZDY0NjFkNWI0MTA1ZDFhMjY4NCIsImlhdCI6MTQ1ODU4MTQwNiwiZXhwIjoxNDU5MTg2Mjc4fQ.UDFUe0Zb2ZHx3HXdiUXWnHSyKghVI_harpkkyC3BU8A"</span>
</code></pre>

<p>Depending on the origin enviornment of a request to Stamplay, the method of authenticating the request differs.</p>

<p>Client side requests can be authenticated by setting the <code class="prettyprint">x-stamplay-jwt</code> header as the JSON Web Token issued when a user authenticates with an email and password, or social provider.</p>

<p>Server side request can be authenticated by setting the <code class="prettyprint">Authorization</code> header as <code class="prettyprint">Basic AppId:ApiKey</code>. The <code class="prettyprint">AppId:ApiKey</code> are to be set as a base64 encoding.</p>

<h2 id="cors-policy">CORS Policy</h2>

<p>Stamplay uses a selective cross-origin resource sharing (CORS) policy, meaning that you may only make requests to the Stamplay from an origin that has been previously declared.</p>

<p>This is made to govern which origins are authorized and which are not. By default only the base URL ending with <code class="prettyprint">.stamplayapp.com</code> is the one allowed to send requests.</p>

<p>To enabled other CORS enabled domains, visit the <strong>Hosting</strong> section with the Stamplay editor.</p>

<h2 id="allowed-http-requests">Allowed HTTP Requests</h2>

<table><thead>
<tr>
<th>Method</th>
<th>Summary</th>
</tr>
</thead><tbody>
<tr>
<td>GET</td>
<td>Get a resource or list of resources</td>
</tr>
<tr>
<td>POST</td>
<td>Create a resource</td>
</tr>
<tr>
<td>PUT</td>
<td>pdate a resource</td>
</tr>
<tr>
<td>PATCH</td>
<td>Update a resource partially</td>
</tr>
<tr>
<td>DELETE</td>
<td>Delete a resource</td>
</tr>
</tbody></table>

<h2 id="error-codes">Error Codes</h2>

<table><thead>
<tr>
<th>Status Code</th>
<th>Status Text</th>
<th>Summary</th>
</tr>
</thead><tbody>
<tr>
<td>200</td>
<td>OK</td>
<td>The request was successful.</td>
</tr>
<tr>
<td>201</td>
<td>Created</td>
<td>The request was successful and a resource was created.</td>
</tr>
<tr>
<td>204</td>
<td>No Content</td>
<td>The request was successful but there is no representation to return (i.e. the response is empty).</td>
</tr>
<tr>
<td>400</td>
<td>Bad Request</td>
<td>The request could not be understood or was missing required parameters.</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td>Authentication failed or the user request the resource doesn’t have the required permissions for reqested operation.</td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td>Access denied, Authentication will not help.</td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td>Resource not found.</td>
</tr>
<tr>
<td>405</td>
<td>Method Not Allowed</td>
<td>Requested method is not supported for resource.</td>
</tr>
<tr>
<td>500</td>
<td>Internal Server Error</td>
<td>Something went wrong during your request</td>
</tr>
</tbody></table>
